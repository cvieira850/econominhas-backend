// Docs: https://dbml.dbdiagram.io/docs/
// View: https://dbdocs.io/henriqueleite42/Econominhas?view=relationships

Project Econominhas {
  database_type: 'PostgreSQL'
  Note: '''
    # Econominhas Database
  '''
}

//
//
// Accounts
//
//

enum timezone {
	"America/Araguaina" [note: '-03:00']
	"America/Bahia" [note: '-03:00']
	"America/Belem" [note: '-03:00']
	"America/Boa_Vista" [note: '-04:00']
	"America/Campo_Grande" [note: '-04:00']
	"America/Cuiaba" [note: '-04:00']
	"America/Eirunepe" [note: '-05:00']
	"America/Fortaleza" [note: '-03:00']
	"America/Maceio" [note: '-03:00']
	"America/Manaus" [note: '-04:00']
	"America/Noronha" [note: '-02:00']
	"America/Porto_Velho" [note: '-04:00']
	"America/Recife" [note: '-03:00']
	"America/Rio_Branco" [note: '-05:00']
	"America/Santarem" [note: '-03:00']
	"America/Sao_Paulo" [note: '-03:00']
}

enum sign_in_provider {
	"GOOGLE"
}

Table accounts {
  id char(16) [pk]
  email varchar(150) [unique]
  phone varchar(25) [unique]
  created_at timestamp [default: `now()`, not null]

  note: "Contains user's sign in information"
}

Table sign_in_providers {
	account_id char(16) [not null] // See Ref google.account_id
	provider sign_in_provider [not null]
  access_token varchar [not null]
  refresh_token varchar [not null]
  expires_at timestamp [not null]

	note: "Contains user's link to google account"

	indexes {
  	(account_id, provider) [pk]
	}
}

Ref: accounts.id < sign_in_provider.account_id [delete: cascade]

Table configs {
	account_id char(16) [pk] // See Ref configs.account_id
	name varchar(20) [not null]
	timezone timezone [not null]
	current_budget_id char(16) // See Ref accounts.current_budget_id
	salary_id char(16) // See Ref accounts.salary_id

  note: "Contains user's account config"
}

Ref: accounts.id - configs.account_id [delete: cascade]
Ref: budgets.id - configs.current_budget_id [delete: set null]
Ref: recurrent_transactions.id - configs.salary_id [delete: set null]

Table magic_link_codes {
	account_id char(16) [pk] // See Ref magic_link_codes.account_id
  code char(32) [not null]
  created_at timestamp [not null]

	note: "Contains codes to be used by the users to login"
}

Ref: accounts.id - magic_link_codes.account_id [delete: cascade]

//
//
// Subscriptions
//
//

Table subscriptions {
  id char(16) [pk]
	name varchar(50) [not null]
	icon varchar(50) [not null]
	color char(7) [not null]
	icon_color char(7) [not null]
	monthly_price smallint [not null]
	yearly_price smallint [not null]
	// Number limits
	bank_accounts smallint [not null, note: '-1 = Infinite']
	postpaid_card smallint [not null, note: '-1 = Infinite']
	prepaid_card smallint [not null, note: '-1 = Infinite']
	categories smallint [not null, note: '-1 = Infinite']
	transactions_per_month smallint [not null, note: '-1 = Infinite']
	recurrent_transactions smallint [not null, note: '-1 = Infinite']
	reports smallint [not null, note: '-1 = Infinite']
	tags smallint [not null, note: '-1 = Infinite']
	reminders smallint [not null, note: '-1 = Infinite']
	bank_integrations smallint [not null, note: '-1 = Infinite']
	budgets smallint [not null, note: '-1 = Infinite']
	// Boolean limits
	web boolean [not null, note: 'If the user has access to the web version']
	ctl_bpm boolean [not null, note: 'Control budget per month: If allows the user to have a more precisa control over his budget, allowing him to edit each months budget, or he can only defines 1 value for all months of the year']

	note: "Contains information about the subscriptions"
}

Table users_subscriptions {
  id char(16) [pk]
	account_id char(16) [not null] // See Ref users_subscriptions.account_id
	subscription_id char(16) [not null]  // See Ref configs.subscription_id
	started_at timestamp [not null]
	last_renewal_at timestamp
	cancelled_at timestamp [note: 'The base subscription will never have a cancelled_at, it will ALWAYS be active']

	note: "Contains the user's subscription"
}

Ref: accounts.id < users_subscriptions.account_id [delete: restrict]
Ref: subscriptions.id < users_subscriptions.subscription_id [delete: restrict]

//
//
// Temrs of service\
//
//

Table terms {
  id varchar [pk] // semver
  terms_of_use varchar [not null]
  privacy_policy varchar [not null]
  live_at timestamp
  created_at timestamp [default: `now()`, not null]

	note: "Contains the terms of use and privacy policy"
}

Table terms_accepted {
  id char(16) [pk]
	account_id char(16) [not null] // See Ref terms_accepted.account_id
	terms_id varchar [not null] // See Ref terms_accepted.terms_id
  accepted_at timestamp [default: `now()`, not null]

	note: "Contains the record of all the terms accepted by the user"
}

Ref: accounts.id < terms_accepted.account_id [delete: cascade]
Ref: terms.id < terms_accepted.terms_id [delete: restrict]

//
//
// Banks
//
//

Table bank_providers {
  id char(16) [pk]
	name varchar(50) [not null]
	code char(3) [not null]
	icon_url varchar(200) [not null]
	color char(7) [not null]

  note: "Contains the record of all the existant banks"
}

Table bank_accounts {
  id char(16) [pk]
	account_id char(16) [not null] // See Ref bank_accounts.account_id
	bank_id char(16) [not null] // See Ref bank_accounts.bank_id
	account_number char(6) [not null]
	branch char(4) [not null]
	balance int [not null]
	name varchar(50) [not null]

	note: "Contains the record of all the user's banks accounts"
}

Ref: accounts.id < bank_accounts.account_id [delete: restrict]
Ref: bank_providers.id < bank_accounts.bank_id [delete: restrict]

//
//
// Cards
//
//

enum card_type {
	CREDIT
	VA
	VR
	VT
}

enum card_network {
	VISA
	MASTERCARD
	ELO
	SODEXO
}

enum card_pay_at {
	DUE
	STATEMENT
}

Table card_providers {
  id char(16) [pk]
	bank_id char(16) // See Ref card_providers.bank_id
	name varchar(50) [not null]
	icon_url varchar(200) [not null]
	color char(7) [not null]
	type card_type [not null]
	network card_network [not null]
	statement_days smallint [note: 'Only postpaid cards have this column']

	note: "Contains the record of all the existant cards"
}

Ref: bank_providers.id < card_providers.bank_id [delete: restrict]

Table cards {
  id char(16) [pk]
	account_id char(16) [not null] // See Ref cards.account_id
	card_provider_id char(16) [not null] // See Ref cards.card_provider_id
	name varchar(50) [not null]
	last_four_digits char(4) [not null]

	due_day smallint [note: 'Only postpaid cards have this column']
	limit int [note: 'Only postpaid cards have this column']

	balance int [note: 'Only prepaid cards have this column']

  note: "Contains the record of all the user's cards"
}

Ref: accounts.id < cards.account_id [delete: restrict]
Ref: card_providers.id < cards.card_provider_id [delete: restrict]

//
//
// Categories
//
//

Table categories {
  id char(16) [pk]
	account_id char(16) [not null] // See Ref categories.account_id
	name varchar(50) [not null]
	description varchar(300) [not null]
	icon_url varchar(200) [not null]
	color char(7) [not null]
	active boolean [not null]

	note: "Contains all the user's categories"
}

Ref: accounts.id < categories.account_id [delete: restrict]

//
//
// Budgets
//
//

Table budgets {
  id char(16) [pk]
	account_id char(16) [not null] // See Ref budget.account_id
	name varchar(50) [not null]
	description varchar(300) [not null]

	note: "Contains the user's budget information"
}

Ref: accounts.id < budgets.account_id [delete: restrict]

Table budget_items {
	budget_id char(16) [not null] // See Ref budget_items.budget_id
	category_id char(16) [not null] // See Ref budget_items.category_id
	month char(2) [not null]
	year char(4) [not null]
	budget int [not null]

	note: "Contains the user's budgets by category"

	indexes {
  	(budget_id, category_id, month, year) [pk]
	}
}

Ref: budgets.id < budget_items.budget_id [delete: restrict]
Ref: categories.id < budget_items.category_id [delete: restrict]

//
//
// Transactions
//
//

enum transaction_type {
	IN
	OUT
	TRANSFER
}

enum payment_method {
	CARD
	BANK_ACCOUNT
}

enum recurrent_transaction_frequency {
	DAILY [note: 'Every day']
	WEEKLY [note: 'Every week']
	CUSTOM_WEEKLY [note: 'Every week, on the days defined by the user']
	MONTHLY [note: 'Once a month']
	BI_MONTHLY [note: 'Twice a month']
	SEMI_MONTHLY [note: 'One month yes, another month no']
	QUARTERLY [note: 'Once every 3 months']
	ANNUALY [note: 'Once a year']
	SEMI_ANNUALY [note: 'Once every 6 months']
}

enum recurrent_transaction_rule {
	EXACT_AMOUNT
	MBWOPM [note: 'MULTIPLY_BY_WEEKS_OF_PREV_MONTH, the amount is multiplied by the amount of weeks of the previous month']
	MBDOPM [note: 'MULTIPLY_BY_DAYS_OF_PREV_MONTH, the amount is multiplied by the amount of days of the previous month']
}

Table transactions {
  id char(16) [pk]
	account_id char(16) [not null] // See Ref transactions.account_id
	type transaction_type [not null]
	name varchar(50) [not null]
	description varchar(300) [not null]
	amount int [not null]
	budget_id char(16) [not null] // See Ref transactions.budget_id
  created_at timestamp [default: `now()`, not null]
	system_managed boolean [not null, note: 'Define if the transaction is automatic controlled by the system, or if it\'s created and controled by the user']
	recurrent_transaction_id char(16) // See Ref transactions.recurrent_transaction_id

	payment_method payment_method [note: 'Only type=IN,type=OUT transactions have this column']
	category_id char(16) [note: 'Only type=IN,type=OUT transactions have this column'] // See Ref transactions.category_id
	card_id char(16) [note: 'Only type=IN,type=OUT transactions have this column'] // See Ref transactions.card_id
	bank_account_id char(16) [note: 'Only type=IN,type=OUT transactions have this column'] // See Ref transactions.bank_account_id

	bank_account_from_id char(16) [note: 'Only type=TRANSFER transactions have this column'] // See Ref transactions.bank_account_from_id
	bank_account_to_id char(16) [note: 'Only type=TRANSFER transactions have this column'] // See Ref transactions.bank_account_to_id

  note: "Contains all the user's transactions"
}

Ref: accounts.id < transactions.account_id [delete: restrict]
Ref: categories.id < transactions.category_id [delete: restrict]
Ref: budgets.id < transactions.budget_id [delete: restrict]
Ref: recurrent_transactions.id < transactions.recurrent_transaction_id [delete: set null]
Ref: cards.id < transactions.card_id [delete: restrict]
Ref: bank_accounts.id < transactions.bank_account_id [delete: restrict]
Ref: bank_accounts.id < transactions.bank_account_from_id [delete: restrict]
Ref: bank_accounts.id < transactions.bank_account_to_id [delete: restrict]

Table installments {
	transaction_id char(16) [pk] // See Ref transactions.budget_id
	total smallint [not null]
	current smallint [not null]
  created_at timestamp [default: `now()`, not null]

  note: "Contains the installment data of an transactions"
}

Ref: transactions.id - installments.transaction_id [delete: cascade]

Table recurrent_transactions {
  id char(16) [pk]
	account_id char(16) [not null] // See Ref recurrent_transactions.account_id
	budget_id char(16) [not null] // See Ref recurrent_transactions.budget_id
	frequency recurrent_transaction_frequency [not null]
	system_managed boolean [not null, note: 'Define if the recurrent transaction is automatic controlled by the system, or if it\'s created and controled by the user']
	// Data to create the transaction
	type transaction_type
	name varchar(50) [not null]
	description varchar(300) [not null]
	amount int [not null]
	system_managed_t boolean [not null, note: 'Define if the transaction is automatic controlled by the system, or if it\'s controled by the user']
	// Only type=IN,type=OUT
	category_id char(16) [note: 'Only type=IN,type=OUT transactions have this column'] // See Ref recurrent_transactions.category_id
	card_id char(16) [note: 'Only type=IN,type=OUT transactions have this column'] // See Ref recurrent_transactions.card_id
	bank_account_id char(16) [note: 'Only type=IN,type=OUT transactions have this column'] // See Ref recurrent_transactions.bank_account_id
	// Only Only type=TRANSFER
	bank_account_from_id char(16) [note: 'Only type=TRANSFER transactions have this column'] // See Ref recurrent_transactions.bank_account_from_id
	bank_account_to_id char(16) [note: 'Only type=TRANSFER transactions have this column'] // See Ref recurrent_transactions.bank_account_to_id

  note: '''
	Contains all the user's recurrent transactions.

	The recurrent transactions are linked to the budget, this way the user can have a better control of which transactions he wants to execute.
	'''
}

Ref: accounts.id < recurrent_transactions.account_id [delete: restrict]
Ref: budgets.id < recurrent_transactions.budget_id [delete: restrict]
Ref: categories.id < recurrent_transactions.category_id [delete: restrict]
Ref: cards.id < recurrent_transactions.card_id [delete: restrict]
Ref: bank_accounts.id < recurrent_transactions.bank_account_id [delete: restrict]
Ref: bank_accounts.id < recurrent_transactions.bank_account_from_id [delete: restrict]
Ref: bank_accounts.id < recurrent_transactions.bank_account_to_id [delete: restrict]

Table recurrent_transaction_rules {
	recurrent_transaction_id char(16) [pk]  // See Ref recurrent_transaction_rules.recurrent_transaction_id
	rule recurrent_transaction_rule [not null]
	weekday int
	weekdays int[]
	day_of_the_month varchar(5)
	month int

  note: "Contains the recurrent transactions rules to be executed"
}

Ref: recurrent_transactions.id - recurrent_transaction_rules.recurrent_transaction_id [delete: cascade]
